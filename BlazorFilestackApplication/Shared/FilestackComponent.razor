@using RestSharp;
@using RestSharp.Authenticators;
@using Blazored.Toast.Services;
@using System.Security.Cryptography;
@using Microsoft.IdentityModel.Tokens;
@using Newtonsoft.Json;
@using Microsoft.Extensions.Configuration

@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject IConfiguration Configuration

<h3>@Title</h3>
<button onclick="openFilePicker('@ApiKey', '@Policy', '@Signature')">ClientSide FilePicket</button>
<button @onclick="AccessFileUsingBasicAuthentication">ServerSide FilePicket with Basic Authentication</button>
@* Loading anyfile using Policy, Signatures *@
<iframe style="width:100%;height:600px;"
        src="https://cdn.filestackcontent.com/6G4o0V7iTrurGJAwpWXi?policy=@Policy&signature=@Signature">
</iframe>

@code {
    [Parameter]
    public string Title { get; set; }

    public string ApiKey { get; set; }

    public string AppSecret { get; set; }

    public string Policy { get; set; }

    public string Signature { get; set; }

    protected override Task OnInitializedAsync()
    {
        ApiKey = Configuration["AppSettings:ApiKey"];
        AppSecret = Configuration["AppSettings:AppSecret"];

        var policyJson = new PolicyOptions { Expiry = 1611946800, Call = new List<string> { CallOptions.Pick, CallOptions.Read, CallOptions.Write, CallOptions.WriteUrl } };
        var policyJsonString = JsonConvert.SerializeObject(policyJson);

        Policy = GetBase64Policy(policyJsonString);
        Signature = GetSignaturesInHex(Policy, AppSecret);

        return base.OnInitializedAsync();
    }

    public string GetBase64Policy(string policyJsonString)
    {
        return Base64UrlEncoder.Encode(policyJsonString);
    }

    public string GetSignaturesInHex(string policy, string secret)
    {
        secret = secret ?? "";
        var encoding = new System.Text.ASCIIEncoding();
        byte[] keyByte = encoding.GetBytes(secret);
        byte[] messageBytes = encoding.GetBytes(policy);
        using (var hmacsha256 = new HMACSHA256(keyByte))
        {
            byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
            return BitConverter.ToString(hashmessage).Replace("-", "").ToLower();
        }
    }

    public void AccessFileUsingBasicAuthentication()
    {
        var client = new RestClient("https://www.filestackapi.com/api/store/S3?key=ACWTyZlqbT0uEdVfDE87sz");
        client.Authenticator = new HttpBasicAuthenticator("app", AppSecret);
        client.Timeout = -1;

        var request = new RestRequest(Method.POST);
        request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
        request.AddParameter("url", "https://assets.filestackapi.com/watermark.png");

        IRestResponse response = client.Execute(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
            ToastService.ShowSuccess("Accessed Successfully");
        else
            ToastService.ShowError(response.StatusCode.ToString());
    }
}
